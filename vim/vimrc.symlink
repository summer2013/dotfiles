set nocompatible
filetype off

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'


" repos on github

" 全能补全
Plugin 'Shougo/neocomplete.vim'
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3

inoremap <expr><C-g> neocomplete#mappings#undo_completion()
inoremap <expr><C-l> neocomplete#mappings#complete_common_string()

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags


Plugin 'othree/html5.vim'


Plugin 'editorconfig/editorconfig-vim'


Plugin 'pangloss/vim-javascript'


Plugin 'burnettk/vim-angular'


Plugin 'hdima/python-syntax'
let python_highlight_all = 1


" syntax checker
Plugin 'scrooloose/syntastic'
let g:syntastic_check_on_open = 1
let g:syntastic_aggregate_errors = 1

" javascript, `npm install -g jscs` / `npm install -g jshint`
let g:syntastic_javascript_checkers = ['jshint', 'jscs']

"Auto jscs fix
function! JscsFix()
    "Save current cursor position"
    let l:winview = winsaveview()
    "Pipe the current buffer (%) through the jscs -x command"
    % ! jscs -x
    "Restore cursor position - this is needed as piping the file"
    "through jscs jumps the cursor to the top"
    call winrestview(l:winview)
endfunction
command JscsFix :call JscsFix()
"Run the JscsFix command just before the buffer is written for *.js files"
autocmd BufWritePre *.js JscsFix

" json, `npm install -g jsonlint`
let g:syntastic_json_checkers = ['jsonlint']
autocmd BufRead,BufNewFile *.json set filetype=json

" need install flake8: `pip3 install flake8`
let g:syntastic_python_checkers = ['flake8']


" Better file browser
Plugin 'scrooloose/nerdtree'
let NERDTreeMinimalUI = 1 " use minimal UI
let NERDTreeShowHidden = 1 " show hidden files
let NERDTreeChDirMode = 2 " change vim directory automatically
let NERDTreeAutoDeleteBuffer = 1
let NERDTreeIgnore = ['\.DS_Store', '\.swp$']
autocmd vimenter * if !argc() | NERDTree | endif
map <F9> :NERDTreeToggle<CR>


" Code commenter
Plugin 'scrooloose/nerdcommenter'


" Surround
Plugin 'tpope/vim-surround'


" Zen coding
Plugin 'mattn/emmet-vim'
let g:user_emmet_expandabbr_key = '\\'
let g:user_emmet_previous_key = '\['
let g:user_emmet_next_key = '\]'


" Code and files fuzzy finder
Plugin 'kien/ctrlp.vim'
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlPBuffer'  " 默认在 buffers 中搜索
let g:ctrlp_regexp = 1  " 使用正则搜索文件, ctrl+r 切换
let g:ctrlp_by_filename = 1 " 只搜索文件名, ctrl+d 切换
let g:ctrlp_working_path_mode = 0
let g:ctrlp_show_hidden = 1
let g:ctrlp_custom_ignore = {
    \ 'dir': '\v[\/](\.(git|cache)|build|dist)$',
    \ 'file': '\v\.(DS_Store|swp)$'
\ }


" Dart Language Syntax
Plugin 'dart-lang/dart-vim-plugin'


" git
Plugin 'tpope/vim-fugitive'

Plugin 'bling/vim-airline'
let g:airline_theme = 'simple'
let g:airline_left_sep = ''
let g:airline_right_sep = ''
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.branch = '↯'
let g:airline_symbols.linenr = '┼'


Plugin 'groenewege/vim-less'

Plugin 'skammer/vim-css-color'

Plugin 'arzyu/vim-glaring-theme'

Plugin 'easymotion/vim-easymotion'


Plugin 'heavenshell/vim-jsdoc'
let g:jsdoc_default_mapping = 0

Plugin 'suan/vim-instant-markdown'
" Need install instant-markdown-d: `npm -g install instant-markdown-d`
let g:instant_markdown_autostart = 0


if has('unix') && !has('mac')
	Plugin 'vim-scripts/fcitx.vim'
endif


" All of your Plugins must be added before the following line
call vundle#end()


filetype plugin on
filetype indent on


" save file
nmap <leader>w :w!<cr>

" 切换分割窗口
map <C-k> <C-W>k
map <C-j> <C-W>j
map <C-h> <C-W>h
map <C-l> <C-W>l

" 移动分割窗口 alt + k/j/h/l
if has('mac') || has('macunix')
    map ˚ <C-W>K
    map ∆ <C-W>J
    map ˙ <C-W>H
    map ¬ <C-W>L
else
    map <M-k> <C-W>K
    map <M-j> <C-W>J
    map <M-h> <C-W>H
    map <M-l> <C-W>L
endif

" buffer 切换
map <C-S-TAB> :bp<CR>
map <C-TAB> :bn<CR>

" quickfix 窗口 alt + p/n
map ∏ :cp<CR>
map ˜ :cn<CR>

map <F5> /月亮忘记了～<CR>:syntax on<CR>

cmap <C-p> <Up>
cmap <C-n> <Down>

set nobackup
set autoread

set incsearch "Make search act like search in modern browsers
set magic "Set magic on, for regular expressions
set showmatch "Show matching bracets when text indicator is over them
set is "imediately show the search result
set hlsearch "Hight light search
set smartcase

set number
set ruler
set showcmd

set history=500

set autoindent
set smartindent
set smarttab

set wrap

set matchpairs+=<:>

set foldmethod=indent
set foldlevelstart=99

try
    colorscheme glaring
catch
endtry

set t_Co=256

if has('gui_running')
    set lines=40
    set columns=120

    set winaltkeys=no " Don't use ALT keys for menus

    set guioptions-=T "Disable toolbar
    set guioptions-=r
    set guioptions-=R
    set guioptions-=l
    set guioptions-=L
    set guioptions-=R
    set guioptions-=b

    if has('mac') || has('macunix')
        set guifont=Monaco:h14
    else
        set guifont=Monaco\ 10
    endif
endif

" last window will always have a status line
set laststatus=2

" 文件格式
set fileencodings=utf-8,gbk
set fileformats=unix,dos,mac

" 移除 BOM
set nobomb

" Set interactive bash as the default vim shell
set shell=bash\ -i

autocmd BufWrite * set fileformat=unix
